#!/bin/bash
# automatic let's encrypt certification via certbot importing domains list from csv
# author: Ugo Viti <ugo.viti@initzero.it>
# version: 20201118

# certbot csv fields format:
# frontend_address;email;webroot;domain;additionalDomain1;additionalDomain2;...;additionalDomainN

CSV_CERTBOT="$1"
shift
certbotOpts="$@"

## certbot ssl certificates management
: ${CSV_CERTBOT:="/.certbot.csv"} # import ssl domains list using this csv

certbotCmd() {
  set -x
  certbot certonly $certbotOpts --expand --noninteractive --agree-tos --email "$CERTBOT_EMAIL" --webroot --webroot-path "$CERTBOT_WEBROOT" --cert-name $CERTBOT_DOMAIN_MAIN $CERTBOT_DOMAINS_VALID
  set +x
}

backupLetsEncrypt() {
  if [ -e "$CERTBOT_CONFIG" ]; then
    echo "---> WARNING: Detected an old config file: moving '$CERTBOT_CONFIG' to '$CERTBOT_DIR_DOMAIN_BACKUP/renewal'"
    mv "$CERTBOT_CONFIG" "$CERTBOT_DIR_DOMAIN_BACKUP/renewal"
  fi
  if [ -e "$CERTBOT_DIR_DOMAIN" ]; then
    echo "---> WARNING: Detected an old live directory: moving '$CERTBOT_DIR_DOMAIN' to '$CERTBOT_DIR_DOMAIN_BACKUP/live'"
    mv "$CERTBOT_DIR_DOMAIN" "$CERTBOT_DIR_DOMAIN_BACKUP/live"
  fi
  if [ -e "$CERTBOT_DIR_DOMAIN_ARCHIVE" ]; then
    echo "---> WARNING: Detected an old archive directory: moving '$CERTBOT_DIR_DOMAIN_ARCHIVE' to '$CERTBOT_DIR_DOMAIN_BACKUP/archive'"
    mv "$CERTBOT_DIR_DOMAIN_ARCHIVE" "$CERTBOT_DIR_DOMAIN_BACKUP/archive/"
  fi
}

addCSVLetsEncrypt() {
#if [ -z "$1" ] || [ ! -e "$1" ]; then echo "unable to fine input file $file. exiting..." && exit 1 ; fi

cat "$1" | while read line; do
  CERTBOT_FRONTEND_ADDRESS="$(echo "$line" | cut -d';' -f1)"
  CERTBOT_EMAIL="$(echo "$line" | cut -d';' -f2)"
  CERTBOT_WEBROOT="$(echo "$line" | cut -d';' -f3)"
  CERTBOT_DOMAIN_MAIN="$(echo "$line" | cut -d';' -f4)"
  CERTBOT_DOMAIN_ALIAS="$(echo "$line" | cut -d';' -f5-)"
  CERTBOT_DOMAIN_ALL="${CERTBOT_DOMAIN_MAIN}$([ ! -z "$CERTBOT_DOMAIN_ALIAS" ] && echo ";$CERTBOT_DOMAIN_ALIAS")"
  
  # default variables if empty
  [ -z "$CERTBOT_EMAIL" ] && $CERTBOT_EMAIL="root@localhost.localdomain"
  
  echo "==> Verifying SSL certificates for domains: '$CERTBOT_DOMAIN_ALL'"
  if [ -e "$CERTBOT_WEBROOT" ] ; then

  while read CERTBOT_DOMAIN ; do
      #echo CERTBOT_DOMAIN=$CERTBOT_DOMAIN
      IP_FRONTEND="$(host $CERTBOT_FRONTEND_ADDRESS | awk '/has address/ { print $4 ; exit }')"
      IP_DOMAIN="$(host $CERTBOT_DOMAIN | awk '/has address/ { print $4 ; exit }')"
      if [ ! -z "$IP_DOMAIN" ]; then
        if [ "$IP_DOMAIN" = "$IP_FRONTEND" ]; then
          CERTBOT_DOMAINS_VALID+=" -d $CERTBOT_DOMAIN"
         else
          echo "---> WARNING: The resolved IP of $CERTBOT_DOMAIN ($IP_DOMAIN) differ from frontend $CERTBOT_FRONTEND_ADDRESS ($IP_FRONTEND)... skipping certificate request for domain $CERTBOT_DOMAIN"
        fi
        else
          echo "---> WARNING: Excluding domain $CERTBOT_DOMAIN because could not be resolved via DNS lookup query"
      fi
    done < <(echo "$CERTBOT_DOMAIN_ALL" | sed $'s/;/\\\n/g')

    # verify if DNS is configured
    if [ ! -z "$CERTBOT_DOMAINS_VALID" ]; then
        # verify if the certificate exist and is due to renew
        CERTBOT_DIR="/etc/letsencrypt"
        CERTBOT_DIR_BACKUP="$CERTBOT_DIR/backup"
        CERTBOT_DIR_ARCHIVE="$CERTBOT_DIR/archive"
        CERTBOT_DIR_LIVE="$CERTBOT_DIR/live"
        CERTBOT_DIR_RENEWAL="$CERTBOT_DIR/renewal"
        CERTBOT_DIR_DOMAIN="$CERTBOT_DIR_LIVE/$CERTBOT_DOMAIN_MAIN"
        CERTBOT_DIR_DOMAIN_ARCHIVE="$CERTBOT_DIR_ARCHIVE/$CERTBOT_DOMAIN_MAIN"
        CERTBOT_CONFIG="$CERTBOT_DIR_RENEWAL/$CERTBOT_DOMAIN_MAIN.conf"
        CERTBOT_FULLCHAIN="$CERTBOT_DIR_DOMAIN/fullchain.pem"
        CERTBOT_DIR_DOMAIN_BACKUP="$CERTBOT_DIR_BACKUP/$CERTBOT_DOMAIN_MAIN-$(date +%Y%m%d-%H%M%S)"

        # make directories that doesn't exist
        [ ! -e "$CERTBOT_DIR_DOMAIN_BACKUP" ] && mkdir -p "$CERTBOT_DIR_DOMAIN_BACKUP/"{archive,live,renewal}

        if [ -e "$CERTBOT_FULLCHAIN" ]; then
          CERTBOT_CN="$(openssl x509 -noout -subject -in "$CERTBOT_FULLCHAIN" | sed 's/.*CN = //' | sed 's/\/.*$//')"
          # 2592000 = 30 days
          # 1296000 = 15 days
          # 864000 = 10 days
          # 604800 = 7 days
          # 259200 = 3 days
          # 86400 = 1 day
          THRESHOLD_RENEW=604800
          UNIXTIME_EXPIRE=$(date -d "$(openssl x509 -noout -dates -in "$CERTBOT_FULLCHAIN" | grep ^"notAfter=" | sed 's/^notAfter=//')" +%s)
          UNIXTIME_RENEW=$(echo $(date +%s) + $THRESHOLD_RENEW | bc)
          if [ "$CERTBOT_CN" != "$CERTBOT_DOMAIN_MAIN" ]; then
              echo "---> INFO: Certificate already exist with a wrong CN ($CERTBOT_CN) ricreating it for new CN ($CERTBOT_DOMAIN_MAIN)"
              backupLetsEncrypt
              certbotCmd
          elif [ $UNIXTIME_RENEW -gt $UNIXTIME_EXPIRE ]; then
              echo "---> INFO: MUST RENEW $CERTBOT_DOMAIN_MAIN (expires on $(date -d @$UNIXTIME_EXPIRE +'%Y-%m-%d %H:%M:%S'))"
              certbotCmd
            else
              echo "---> INFO: NOT RENEWING $CERTBOT_DOMAIN_MAIN (expires on $(date -d @$UNIXTIME_EXPIRE +'%Y-%m-%d %H:%M:%S'))"
          fi
         else
          # default run
          backupLetsEncrypt
          echo "---> INFO: Generating NEW certificates using webroot '$CERTBOT_WEBROOT' for domains: '$CERTBOT_DOMAINS_VALID'"
          certbotCmd
        fi
      else
        echo "---> ERROR: Invalid DNS found for domain $CERTBOT_DOMAIN_MAIN"
    fi
    unset CERTBOT_DOMAINS_VALID
   else
    echo "---> ERROR: webroot '$CERTBOT_WEBROOT' doesn't exist... retry later"
  fi
done
}

[ ! -e "$CSV_CERTBOT" ] && echo "ERROR: unable to open CSV file: $CSV_CERTBOT - exiting..." && exit 1

addCSVLetsEncrypt $CSV_CERTBOT
